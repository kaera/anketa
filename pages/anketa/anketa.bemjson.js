// This file is autogenerated from pages/anketa/anketa.src.js
({
    block: 'b-page',
    title: 'Pseudo link',
    head: [
        { elem: 'css', url: '_anketa.css'},
        // { elem: 'css', url: '_anketa', ie: true },
        { block: 'i-jquery', elem: 'core' },
        { elem: 'js', url: '_anketa.js' }
    ],
    content: [
        {
            block: 'b-text',
            content: [
                {
                    elem: 'h1',
                    content: 'Анкета'
                }
            ]
        },
        {
            block: 'b-article',
            header: 'Общие вопросы',
            content: [
                {
                    elem: 'item',
                    name: 'Фамилия, имя, отчество',
                    value: 'John Doe'
                },
                {
                    elem: 'item',
                    name: 'E-mail',
                    value: 'john@doe.name'
                },
                {
                    elem: 'item',
                    name: 'Телефон',
                    value: '+12345678901'
                },
                {
                    elem: 'item',
                    name: 'Год рождения',
                    value: '1985'
                },
                {
                    elem: 'item',
                    name: 'Город, в котором живете',
                    value: 'Москва'
                },
                {
                    elem: 'item',
                    name: 'Вуз, факультет, специальность, кафедра',
                    value: 'МГУ'
                },
                {
                    elem: 'item',
                    name: 'Год окончания вуза',
                    value: '2008'
                },
                {
                    elem: 'item',
                    name: 'На каком уровне владеете английским языком?',
                    value: 'Pre-intermadiate'
                },
                {
                    elem: 'item',
                    name: 'Чего вы ожидаете от участия в Школе?',
                    value: ''
                },
                {
                    elem: 'item',
                    name: 'Откуда вы о нас узнали?',
                    value: 'dou'
                },
                {
                    elem: 'item',
                    name: 'Сколько времени вы были бы готовы уделять стажировке или работе в Яндексе?',
                    value: ''
                }
            ]
        },
        {
            block: 'b-details',
            summary: 'Автосалон',
            content: {
                block: 'b-text',
                content: [
                    {
                        elem: 'pre',
                        mix: [{ block: 'b-details', elem: 'code' }],
                        content: '/**\n * Создает экземпляр Машины\n * @this {Car}\n * @param {string} manufacturer Производитель\n * @param {string} model Модель\n * @param {number} year Год производство\n */\nfunction Car(manufacturer, model, year) {\n    this.manufacturer = manufacturer;\n    this.model = model;\n\n    // Если конструктор вызывается без указания текущего года, то подставлять текущий\n    this.year = year || (new Date).getFullYear();\n}\n\n// Методы вывода информации о машине\nCar.prototype.getInfo = Car.prototype.toString = function() {\n    return [this.manufacturer, this.model, this.year].join(\' \')\n}\nCar.prototype.getDetailedInfo = function() {\n    return \'Производитель: \' + this.manufacturer +\n           \'. Модель: \' + this.model +\n           \'. Год: \' + this.year\n}\n\nvar bmw = new Car(\'BMW\', \'X5\', 2010),\n    audi = new Car(\'Audi\', \'Q5\', 2012),\n    toyota = new Car(\'Toyota\', \'Camry\');\n\n// console.log(\'Car: \' + bmw); // Car: BMW X5 2010\n// console.log(bmw.getInfo()); // BMW X5 2010\n// console.log(bmw.getDetailedInfo()); // Производитель: BMW. Модель: X5. Год: 2010\n\n/**\n * Создает экземпляр Автосалона\n * @this {CarDealer}\n * @param {string} name Название автосалона\n */\nfunction CarDealer(name) {\n    this.name = name;\n    this.cars = [];\n}\n\nvar yandex = new CarDealer(\'Яндекс.Авто\');\n\n/**\n * Добавить одну или несколько машин в автосалон\n * @param {...Car} var_args\n */\nCarDealer.prototype.add = function() {\n    for (var i = 0, l = arguments.length; i < l; i++) {\n        this.cars.push(arguments[i]);\n    };\n    return this\n}\nyandex\n    .add(toyota)\n    .add(bmw, audi);\n\n/**\n * Установить цену на машину\n * @param {string} car идентификатор машины\n * @param {string} price стоимость\n */\nCarDealer.prototype.setPrice = function(car, price) {\n    (this.catalog) || (this.catalog = {});\n    // Стоимость машины может быть задана в двух валютах: йена и евро.\n    if (price[0] == \'€\' || price[0] == \'¥\') {\n        this.catalog[car] = price;\n    };\n    return this\n}\nyandex\n    .setPrice(\'BMW X5 2010\', \'€2000\')\n    .setPrice(\'Audi Q5 2012\', \'€3000\')\n    .setPrice(\'Toyota Camry 2012\', \'¥3000\');\n\nfunction getCountry() {\n    switch (this.manufacturer.toLowerCase()) {\n        case \'bmw\':\n        case \'audi\':\n            return \'Germany\';\n\n        case \'toyota\':\n            return \'Japan\';\n    }\n}\n\n/**\n * Вывод списка автомобилей\n */\nCarDealer.prototype.list = function() {\n    console.log(this.cars.join(\', \'));\n}\n\n/**\n * Вывод списка автомобилей с фильтрацией\n * по стране производителю, используя метод getCountry\n *\n * @param {string} country\n */\nCarDealer.prototype.listByCountry = function(country) {\n    var cars = [];\n    for (var i = 0, l = this.cars.length; i < l; i++) {\n        if (getCountry.call(this.cars[i]) == country) {\n            cars.push(this.cars[i]);\n        };\n    };\n    console.log(cars.join(\', \'));\n}\nyandex.list(); //BMW X5 2010, Audi Q5 2012, Toyota Camry 2012\nyandex.listByCountry(\'Germany\'); //BMW X5 2010, Audi Q5 2012\n\n/**\n * Вывод списка машин с ценой в рублях\n */\nCarDealer.prototype.listWithPrice = function() {\n    var cars = [],\n        car;\n\n    for (car in this.catalog) {\n        if (this.catalog.hasOwnProperty(car)) {\n          console.log(car + \': \' + convert(this.catalog[car]));\n        };\n    };\n\n    function convert(price) {\n      var rate;\n      switch (price[0]) {\n        case \'€\': rate = 40; break;\n        case \'¥\': rate = 15; break;\n      };\n      return +price.slice(1) * rate + \' руб.\'\n    };\n}\nyandex.listWithPrice();\n'
                    }
                ]
            }
        },
        {
            block: 'b-details',
            summary: 'Скриптовая задача',
            content: {
                block: 'b-text',
                content: [
                    {
                        elem: 'h3',
                        content: 'Bash'
                    },
                    {
                        elem: 'pre',
                        mix: [{ block: 'b-details', elem: 'code' }],
                        content: '#!/usr/bin/env bash\n\nusage() {\ncat << EOF\nUsage: printargs.sh [OPTIONS] [ARGUMENTS]\n  Print the number of arguments.\n\nOPTIONS:\n  -h      print help message\n  -m MSG  custom message\n  -v      verbose mode\n\nExamples:\n  printargs.sh a b c\n  printargs.sh -m \'Arguments count: \' a b c\n  printargs.sh -v -m \'Arguments count: \' a b c\n  printargs.sh -h\n\nEOF\n}\n\nwhile getopts \'hm:v\' OPTION\ndo\n    case $OPTION in\n        h)\n            usage\n            exit 1;;\n        m)\n            MESSAGE=$OPTARG;;\n        v)\n            VERBOSE=1;;\n    esac\ndone\n\nCOUNT=0\n\n[ $VERBOSE ] && shift\n[ $MESSAGE ] && shift 2\n\nfor ARG in $@; do\n    [ $VERBOSE ] && echo $ARG\n    let COUNT+=1\ndone\n\nif [[ $MESSAGE != \'\' ]]; then\n    echo $MESSAGE\nfi\n\necho $COUNT\n'
                    },
                    {
                        elem: 'h3',
                        content: 'Python'
                    },
                    {
                        elem: 'pre',
                        mix: [{ block: 'b-details', elem: 'code' }],
                        content: '#!/usr/bin/env python\n\nimport argparse\n\nparser = argparse.ArgumentParser(description=\'Print the number of arguments.\')\nparser.add_argument(\'arguments\', metavar=\'ARG\', type=str, nargs=\'*\', help=\'some arguments\')\nparser.add_argument(\'-m\', dest=\'message\', default=\'\', help=\'custom message\')\nparser.add_argument(\'-v\', \'--verbose\', action=\'store_true\', dest=\'verbose\', help=\'verbose mode\')\n\nargs = parser.parse_args()\n\ncount = 0\n\nfor a in args.arguments:\n    if args.verbose:\n        print a\n    count += 1\n\nif args.message != \'\':\n    print(args.message)\n\nprint(count)\n'
                    },
                    {
                        elem: 'h3',
                        content: 'Perl'
                    },
                    {
                        elem: 'pre',
                        mix: [{ block: 'b-details', elem: 'code' }],
                        content: '#!/usr/bin/env perl\n\nuse strict;\nuse Getopt::Long;\nuse Pod::Usage;\n\nmy $help;\nmy $message = "";\nmy $verbose;\n\n@ARGV and GetOptions(\n    "h" => \$help,\n    "m:s" => \$message,\n    "v" => \$verbose,\n) or pod2usage(1);\npod2usage(-verbose => 2, -exitval => 2) if $help;\n\nmy $count = 0;\nmy $arg;\n\nforeach $arg (@ARGV) {\n    print($arg . "\\n") if $verbose;\n    $count++;\n}\n\nif($message ne "") {\n    print($message . "\\n");\n}\n\nprint($count . "\\n");\n\n__END__\n\n=head1 NAME\n\n    printargs.pl - Print the number of arguments.\n\n=head1 SYNOPSIS\n\n    printargs.pl [options] [arguments]\n\n=head1 OPTIONS\n\n    -h      Show help message.\n\n    -m MSG  Specify a custom message.\n\n\n=head1 EXAMPLE\n\n    printargs.sh a b c\n\n    printargs.pl -m "Arguments count: " a b c\n\n    printargs.pl -v a b c\n\n    printargs.pl -h\n'
                    }
                ]
            }
        }
    ]
})
